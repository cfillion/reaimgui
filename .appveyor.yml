---
version: "{build}-{branch}"
stack: ruby 2.7

before_build:
  - git submodule update --init --depth 1
build_script:
  - bash -c "cmake -B build
              -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$TOOLCHAIN
              -DVCPKG_TARGET_TRIPLET=$VCPKG_TARGET_TRIPLET"
  - cmake --build build --target reaimgui
  - '[ "$ARCH" = "arm64" ] || cmake --build build --target bindings'
  - '[ "$ARCH" = "arm64" ] || cmake --build build --target tests'
test_script:
  - '[ "$ARCH" = "arm64" ] || cmake --build build --target test'
  - ruby -E UTF-8 tools/coverage.rb

for:
  - matrix: { only: [ appveyor_build_worker_image: &linux Ubuntu1804 ] }
    cache:
      - build/vcpkg_installed -> vcpkg.json, cmake/vcpkg-triplets/arch-env.cmake
    install: |-
      set -e

      sudo sed -i '/arch=/! s/^deb/deb [arch=amd64,i386]/' /etc/apt/sources.list
      awk '
      $3 !~ /ubuntu\.com/ { next }
      $1 == "deb" {
        $2 = "[arch=armhf,arm64]";
        $3 = "http://ports.ubuntu.com/ubuntu-ports/"
      } 1' /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list > /dev/null

      install-deps() {
        local arch="$1"; shift
        local native=("$@" php-cli qemu-user-binfmt)
        local target=(libboost-dev libboost-filesystem-dev libgtk-3-dev)

        sudo dpkg --add-architecture $arch
        sudo apt-get update -qq
        sudo apt-get install -qq aptitude > /dev/null
        sudo aptitude install -yR ${native[@]} ${target[@]/%/:$arch} > /dev/null
      }

      sudo update-alternatives --set gcc /usr/bin/gcc-7

      case $ARCH in
      x86_64)
        install-deps amd64
        ;;
      i686)
        install-deps i386 g++-multilib
        export TOOLCHAIN=$(pwd)/cmake/linux-cross.cmake \
               TOOLCHAIN_PREFIX=i386-linux-gnu
        ;;
      armv7l)
        install-deps armhf g++-arm-linux-gnueabihf
        export TOOLCHAIN=$(pwd)/cmake/linux-cross.cmake \
               TOOLCHAIN_PREFIX=arm-linux-gnueabihf
        ;;
      aarch64)
        install-deps arm64 g++-aarch64-linux-gnu
        export TOOLCHAIN=$(pwd)/cmake/linux-cross.cmake \
               TOOLCHAIN_PREFIX=aarch64-linux-gnu
        ;;
      esac
    artifacts:
      - path: build/reaper_imgui*.so
      - path: build/tools/imgui.lua
      - path: build/tools/imgui_python.py
      - path: build/tools/reaper_imgui_doc.html
      - path: build/tools/reaper_imgui_functions.h

  - matrix: { only: [ appveyor_build_worker_image: macos, appveyor_build_worker_image: macos-mojave ] }
    cache:
      - build/vcpkg_installed -> vcpkg.json, cmake/vcpkg-triplets/arch-env.cmake
    install:
      - export CMAKE_OSX_ARCHITECTURES="$ARCH"

      - |-
        case $ARCH in
        arm64) export CMAKE_OSX_DEPLOYMENT_TARGET=11.0 XCODE_VERSION=12.3  ;;
        *)     export CMAKE_OSX_DEPLOYMENT_TARGET=10.9 XCODE_VERSION=9.4.1 ;;
        esac

      - sudo xcode-select -s /Applications/Xcode-$XCODE_VERSION.app

      # https://letsencrypt.org/docs/dst-root-ca-x3-expiration-september-2021/
      - sudo curl -k https://curl.se/ca/cacert.pem -o /etc/ssl/cert.pem

      # update to cmark 0.30.1 for static linkage
      - git -C ~/vcpkg fetch origin 790418c9037196ef499b642decc2cd880e15db30
      - git -C ~/vcpkg restore -s 790418c9037196ef499b642decc2cd880e15db30 ports/cmark
    artifacts:
      - path: build/reaper_imgui*.dylib
      - path: build/tools/imgui.lua
      - path: build/tools/imgui_python.py
      - path: build/tools/reaper_imgui_doc.html
      - path: build/tools/reaper_imgui_functions.h

  - matrix: { only: [ appveyor_build_worker_image: &windows Visual Studio 2022 ] }
    cache:
      - build\vcpkg_installed -> vcpkg.json
    install:
      - if "%ARCH%" == "x64" call "%ProgramFiles%\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars64.bat"
      - if "%ARCH%" == "x86" call "%ProgramFiles%\Microsoft Visual Studio\2022\Community\VC\Auxiliary\Build\vcvars32.bat"

      - set CMAKE_BUILD_TYPE=RelWithDebInfo
      - set CMAKE_GENERATOR=Ninja
      - set CMAKE_TOOLCHAIN_FILE=C:\Tools\vcpkg\scripts\buildsystems\vcpkg.cmake
      - set VCPKG_TARGET_TRIPLET=%ARCH%-windows-static
    artifacts:
      - path: build\reaper_imgui*.dll
      - path: build\reaper_imgui*.pdb
      - path: build\tools\imgui.lua
      - path: build\tools\imgui_python.py
      - path: build\tools\reaper_imgui_doc.html
      - path: build\tools\reaper_imgui_functions.h

environment:
  CMAKE_BUILD_TYPE: Release
  CMAKE_TOOLCHAIN_FILE: ~/vcpkg/scripts/buildsystems/vcpkg.cmake
  CTEST_OUTPUT_ON_FAILURE: 1
  VCPKG_OVERLAY_TRIPLETS: cmake/vcpkg-triplets
  VCPKG_TARGET_TRIPLET: arch-env
  matrix:
    - job_name: Windows 64-bit
      appveyor_build_worker_image: *windows
      ARCH: x64
    - job_name: Windows 32-bit
      appveyor_build_worker_image: *windows
      ARCH: x86
    - job_name: macOS x86 64-bit
      appveyor_build_worker_image: macos-mojave
      ARCH: x86_64
    - job_name: macOS x86 32-bit
      appveyor_build_worker_image: macos-mojave
      ARCH: i386
    - job_name: macOS ARM 64-bit
      appveyor_build_worker_image: macos
      ARCH: arm64
    - job_name: Linux x86 64-bit
      appveyor_build_worker_image: *linux
      ARCH: x86_64
    - job_name: Linux x86 32-bit
      appveyor_build_worker_image: *linux
      ARCH: i686
    - job_name: Linux ARM 64-bit
      appveyor_build_worker_image: *linux
      ARCH: aarch64
    - job_name: Linux ARM 32-bit
      appveyor_build_worker_image: *linux
      ARCH: armv7l

deploy:
  provider: GitHub
  draft: true
  description: ''
  force_update: true
  auth_token:
    secure: 6dgJUqO2qAwADLQuvONd+mD5esFPBws7RA/3RSiEjrmquCsWpidm4ayawCPSEtfQ
  artifact: /.*\.(dll|dylib|so)|reaper_imgui_doc\.html|reaper_imgui_functions\.h|imgui_python\.py|imgui.lua/
  on:
    APPVEYOR_REPO_TAG: true
